# Sample workflow for building and deploying a Next.js site to GitHub Pages
# with security scanning and CodeQL analysis
#
# To get started with Next.js see: https://nextjs.org/docs/getting-started
#
name: secure-lint-test-build-deploy

on:
  # Runs on pushes targeting the default branch
  # push:
  #   branches: [main]
  
  # Runs on pull requests for security scanning
  # pull_request:
  #   branches: [main]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write  # Required for CodeQL
  actions: read          # Required for CodeQL

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency: next-js

jobs:
  # Security and Code Analysis job
  security-analysis:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better analysis

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: javascript, typescript
          # Optional: specify queries to run
          queries: security-extended,security-and-quality

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for CodeQL analysis
        run: npm run build

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          category: "/language:javascript"
      - name: GitLeaks scan
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Dependency Security Scan
  dependency-security:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run npm audit fix (dry run)
        run: npm audit fix --dry-run
        continue-on-error: true

      - name: Check for outdated packages
        run: npm outdated
        continue-on-error: true


  # Build job
  lint-test-build:
    runs-on: ubuntu-latest
    needs: [security-analysis, dependency-security]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Detect package manager
        id: detect-package-manager
        run: |
          if [ -f "${{ github.workspace }}/yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "tester=yarn" >> $GITHUB_OUTPUT
            echo "command=install" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
            exit 0
          elif [ -f "${{ github.workspace }}/package.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "tester=npm run" >> $GITHUB_OUTPUT
            echo "command=ci" >> $GITHUB_OUTPUT
            echo "runner=npx --no-install" >> $GITHUB_OUTPUT
            exit 0
          else
            echo "Unable to determine package manager"
            exit 1
          fi
            
      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: ${{ steps.detect-package-manager.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-package-manager.outputs.manager }} ${{ steps.detect-package-manager.outputs.command }}
        
      - name: Run Linter
        run: ${{ steps.detect-package-manager.outputs.runner }} next lint
        
      # - name: Run Tests
      #   run: ${{ steps.detect-package-manager.outputs.tester }} test
        
      # - name: Test Coverage
      #   run: ${{ steps.detect-package-manager.outputs.tester }} test:coverage
        
      - name: Build with Next.js
        run: ${{ steps.detect-package-manager.outputs.runner }} next build
        
      - name: Run security headers check
        run: |
          echo "Checking for security headers configuration..."
          if [ -f "next.config.js" ] || [ -f "next.config.mjs" ]; then
            echo "Next.js config found - checking for security headers"
            grep -i "security\|header\|csp\|hsts" next.config.* || echo "Consider adding security headers"
          fi
        continue-on-error: true
        
      - name: Check for sensitive files
        run: |
          echo "Checking for sensitive files that shouldn't be in build..."
          find ./out -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*.p12" | head -10
        continue-on-error: true
        
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          path: ./out

  # Additional Security Checks
  security-hardening:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        
      - name: Check for secrets in code
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified
        continue-on-error: true

      - name: Check package.json for security best practices
        run: |
          echo "Checking package.json for security configurations..."
          if [ -f "package.json" ]; then
            # Check for security scripts
            if grep -q "audit" package.json; then
              echo "✓ npm audit script found"
            else
              echo "⚠ Consider adding npm audit to your scripts"
            fi
            
            # Check for engines specification
            if grep -q "engines" package.json; then
              echo "✓ Node.js engines specified"
            else
              echo "⚠ Consider specifying Node.js engines for consistency"
            fi
            
            # Check for private flag
            if grep -q '"private": true' package.json; then
              echo "✓ Package marked as private"
            else
              echo "⚠ Consider marking package as private if not publishing to npm"
            fi
          fi

  # Deployment job
  deploy:
    runs-on: ubuntu-latest
    needs: [lint-test-build, security-hardening]
    if: github.ref == 'refs/heads/main'  # Only deploy on main branch
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          path: ./out
          
      - name: Deploy
        id: deployment
        run: |
          echo "Deploying to GitHub Pages..."
          # Add your actual deployment steps here